---
//@ts-nocheck
import Layout from "../layouts/Layout.astro";

import { ui } from "../i18n/ui.js";

const locale = (Astro.locals.lang as "en" | "fr") ?? "en";

const user = Astro.locals.user;
---

<Layout title={ui[locale].generator.title}>
  <div class="flex flex-col h-screen p-4 gap-4">
    <div class="flex flex-1 gap-4 flex-col md:flex-row">
      <div
        id="svg-container"
        class="flex-1 border rounded-xl p-4 bg-base-200 flex items-center justify-center min-h-[200px] md:min-h-0"
      >
        <span class="text-gray-400"
          >{ui[locale].generator.contentPlaceholder}</span
        >
      </div>

      <div class="flex-1 border rounded-xl p-4 bg-base-200 overflow-auto mt-4 md:mt-0">
        <pre id="svg-output" class="whitespace-pre-wrap text-sm text-primary">
        </pre>
      </div>
    </div>

    <div class="border rounded-xl p-4 bg-base-100 flex flex-col md:flex-row gap-2">
      <textarea
        id="user-prompt"
        placeholder={ui[locale].generator.promptLabel}
        class="textarea textarea-bordered flex-1 resize-none mb-2 md:mb-0"></textarea>
      <div class="flex flex-col md:flex-row gap-2 w-full md:w-auto">
        <button id="generate-button" class="btn btn-primary w-full md:w-auto">
          {ui[locale].generator.generateButton}
        </button>
        <button id="save-button" class="btn btn-secondary w-full md:w-auto">
          {ui[locale].generator.saveButton}
        </button>
        <button class="btn btn-info w-full md:w-auto" id="edit-button">
          {ui[locale].generator.editButton}
        </button>
      </div>
    </div>
  </div>
</Layout>

<script>
  //@ts-nocheck
  let promptList = [];
  const editButton = document.getElementById("edit-button");
  async function generateSVG(prompt) {
    console.log("Generating SVG for prompt:", prompt);
    const res = await fetch("/api/generateSVG", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(prompt),
    });
    const data = await res.json();
    return data.svg;
  }

  async function handleSubmit() {
    let prompt = "";
    let aiResponse = "";
    const promptElement = document.getElementById("user-prompt");
    prompt = promptElement ? promptElement.value : "";
    console.log("submitted: ", prompt);
    // Réinitialiser la liste des prompts
    promptList.length = 0;
    promptList.push({ role: "user", content: prompt });
    const svgContainer = document.getElementById("svg-container");
    // Afficher un spinner
    svgContainer.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
    generateButton.disabled = true;
    editButton.disabled = true;
    let svgOutput = document.getElementById("svg-output");
    // Appeler la fonction pour générer le SVG
    aiResponse = await generateSVG(promptList);
    // Extraire le SVG de la réponse
    const svgMatch = aiResponse.content.match(/<svg[\s\S]*?<\/svg>/i);
    aiResponse.content = svgMatch ? svgMatch[0] : "";
    console.log("svgCode: ", aiResponse.content);
    // Ajouter la réponse de l'IA à la liste des prompts
    promptList.push(aiResponse);
    // Afficher le SVG généré
    svgOutput.textContent = aiResponse.content;
    svgContainer.innerHTML = aiResponse.content;
    // Réactiver les boutons
    generateButton.disabled = false;
    editButton.disabled = false;
  }

  const generateButton = document.getElementById("generate-button");
  if (generateButton) {
    generateButton.addEventListener("click", handleSubmit);
  }

  // Fonction utilitaire pour sauvegarder le SVG
  const saveButton = document.getElementById("save-button");

  async function saveSVG(params) {
    // Envoi de la requête à notre endpoint
    const res = await fetch("/api/saveSVG", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(params),
    });
    return await res.json();
  }

  const user = JSON.parse(localStorage.getItem("user"));

  saveButton.addEventListener("click", async () => {
    const name = prompt("Enter a name for the SVG:");
    const svgOutput = document.getElementById("svg-output")?.textContent;
    console.log("Saving SVG: ", JSON.stringify(svgOutput));

    const params: Collection.Svg = {
      name: name,
      code_svg: svgOutput || "<svg></svg>",
      chat_history: JSON.stringify(promptList),
      user: user.id,
    };
    await saveSVG(params);
  });
</script>
